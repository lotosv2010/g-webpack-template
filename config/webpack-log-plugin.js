const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const zlib = require('zlib');

class WebpackLogPlugin {
  constructor(options = {}) {
    this.options = {
      threshold: 2 * 1024 * 1024, // Ë∂ÖËøá 2MB ÁöÑÊñá‰ª∂ÊòæÁ§∫‰∏∫ÈªÑËâ≤Ë≠¶Âëä
      ...options
    };
    this.isFirstRun = true;
  }

  apply(compiler) {
    compiler.hooks.done.tap('WebpackLogPlugin', stats => {
      // Èò≤Ê≠¢ÈáçÂ§çËæìÂá∫
      if (!this.isFirstRun && process.env.NODE_ENV === 'production') {
        return;
      }
      this.isFirstRun = false;

      const { assets } = stats.toJson();
      const outputPath = stats.compilation.outputOptions.path;

      // ÊåâÊñá‰ª∂Á±ªÂûãÂØπÊñá‰ª∂ËøõË°åÂàÜÁªÑ
      const fileGroups = {
        js: [],
        css: [],
        html: [],
        images: [],
        others: []
      };

      // Ê†ºÂºèÂåñÂ§ßÂ∞èÂáΩÊï∞
      const formatSize = bytes => {
        if (bytes < 1024) {
          return bytes + ' B';
        } else if (bytes < 1024 * 1024) {
          return (bytes / 1024).toFixed(2) + ' KB';
        } else {
          return (bytes / 1024 / 1024).toFixed(2) + ' MB';
        }
      };

      // Ê∑ªÂä†Â∞∫ÂØ∏ÁôæÂàÜÊØîÊåáÁ§∫Âô®
      const getSizeIndicator = (size, gzipSize) => {
        const compressionRatio = Math.round((1 - gzipSize / size) * 100);
        return chalk.gray(`(ÂéãÁº©Áéá: ${compressionRatio}%)`);
      };

      // Â§ÑÁêÜÊñá‰ª∂Âπ∂ÂàÜÁªÑ
      assets.forEach(asset => {
        let filename = asset.name;
        const size = asset.size;
        const filePath = path.join(outputPath, filename);
        
        // Âè™Â§ÑÁêÜÂ≠òÂú®ÁöÑÊñá‰ª∂
        if (fs.existsSync(filePath)) {
          const content = fs.readFileSync(filePath);
          const gzippedSize = zlib.gzipSync(content).length;
          const ext = path.extname(filename).toLowerCase();
          filename = outputPath.split(path.sep).pop() + '/' + filename;

          const fileInfo = {
            filename,
            size,
            gzippedSize,
            ext
          };
          
          // Ê†πÊçÆÊâ©Â±ïÂêçÂàÜÁªÑ
          if (ext === '.js') {
            fileGroups.js.push(fileInfo);
          } else if (ext === '.css') {
            fileGroups.css.push(fileInfo);
          } else if (ext === '.html') {
            fileGroups.html.push(fileInfo);
          } else if (['.jpg', '.png', '.gif', '.svg', '.webp'].includes(ext)) {
            fileGroups.images.push(fileInfo);
          } else {
            fileGroups.others.push(fileInfo);
          }
        }
      });

      // Âª∂ËøüËæìÂá∫ÔºåÁ°Æ‰øùÂú®ÂÖ∂‰ªñËæìÂá∫ÂÆåÊàêÂêéÊòæÁ§∫
      setTimeout(() => {
        // ËæìÂá∫ÁªìÊûú
        console.log('\n' + chalk.bold.cyan('üì¶ ÊâìÂåÖËæìÂá∫Êñá‰ª∂ÁªüËÆ°:'));
        console.log(chalk.bold.cyan('='.repeat(100)));
        
        let totalFiles = 0;
        let totalSize = 0;
        let totalGzippedSize = 0;
        
        // ÂÆö‰πâÂàÜÁªÑÈ¢úËâ≤ÂíåÂêçÁß∞
        const groupConfig = [
          { name: 'JS Êñá‰ª∂', files: fileGroups.js, color: chalk.green, icon: 'üìú' },
          { name: 'CSS Êñá‰ª∂', files: fileGroups.css, color: chalk.blue, icon: 'üé®' },
          { name: 'HTML Êñá‰ª∂', files: fileGroups.html, color: chalk.magenta, icon: 'üìÑ' },
          { name: 'ÂõæÁâáÊñá‰ª∂', files: fileGroups.images, color: chalk.cyan, icon: 'üñºÔ∏è' },
          { name: 'ÂÖ∂‰ªñÊñá‰ª∂', files: fileGroups.others, color: chalk.white, icon: 'üìÅ' }
        ];
        
        // ÈÅçÂéÜÊØè‰∏™ÂàÜÁªÑÂπ∂ËæìÂá∫
        groupConfig.forEach(group => {
          if (group.files.length > 0) {
            // ÊåâÂ§ßÂ∞èÊéíÂ∫è
            group.files.sort((a, b) => b.size - a.size);
            
            // ËÆ°ÁÆóËØ•ÁªÑÊñá‰ª∂ÁöÑÊÄªÂ§ßÂ∞è
            const groupSize = group.files.reduce((sum, file) => sum + file.size, 0);
            const groupGzippedSize = group.files.reduce((sum, file) => sum + file.gzippedSize, 0);
            
            console.log(`\n${group.icon} ${chalk.bold(group.name)} (${group.files.length}‰∏™, ÂÖ± ${formatSize(groupSize)})`);
            console.log(chalk.dim('file'.padEnd(50) + 'size'.padEnd(15) + 'Gzipped'.padEnd(15) + 'Info'));
            console.log(chalk.dim('‚îÄ'.repeat(100)));
            
            group.files.forEach(file => {
              let color = group.color;
              
              // Ë∂ÖËøáÈòàÂÄºÊòæÁ§∫ÈªÑËâ≤Ë≠¶Âëä
              if (file.size > this.options.threshold) {
                color = chalk.yellow;
              }
              
              console.log(
                color(
                  file.filename.padEnd(50) + 
                  formatSize(file.size).padEnd(15) + 
                  formatSize(file.gzippedSize).padEnd(15)
                ) + 
                getSizeIndicator(file.size, file.gzippedSize)
              );
            });
            
            totalFiles += group.files.length;
            totalSize += groupSize;
            totalGzippedSize += groupGzippedSize;
          }
        });
        
        // ËæìÂá∫ÊÄªËÆ°‰ø°ÊÅØ
        console.log('\n' + chalk.bold.cyan('='.repeat(100)));
        console.log(chalk.bold(`ÊÄªËÆ°: ${totalFiles} ‰∏™Êñá‰ª∂, ÊÄªÂ§ßÂ∞è: ${formatSize(totalSize)}, Gzipped: ${formatSize(totalGzippedSize)}`));
        console.log(chalk.gray(`Âπ≥ÂùáÂéãÁº©Áéá: ${Math.round((1 - totalGzippedSize / totalSize) * 100)}%\n`));
      }, 100);
    });
  }
}

module.exports = WebpackLogPlugin; 